# PYTHON 基础 ******************************************************************

--------------------------------------------------------------------------------
|              while 循环的 else                                                |
--------------------------------------------------------------------------------
|a = 0                                                                         |
|while a < 10:                                                                 |
|    print a                                                                   |
|    a += 1                                                                    |
|    if a > 5:                                                                 |
|        continue                                                              |
|    if a > 9:                                                                 |
|        break                                                                 |
|else:                                                                         |
|    print "ok."                                                               |
|                                                                              |
| while中的else这段代码 如果循环是正常结束 则执行else内的方法                          |
| 虽然中间遭遇了 continue 依然可以执行                                              |
| 但如果是break结束 则不执行                                                       |
--------------------------------------------------------------------------------

# "True" if 1 else "False"
1 and "True" or "False"
0 and "True" or "False"

# 枚举
from enum import Enum, unique

# 商和余数同时得到 divmod()

# from sys import getrefcount
# a = 1
# print getrefcount(a) # 获得该变量被引用的次数


# 定长列表 双端队列 ==================================================================
from collections import deque
deque(maxlen=10) 定长列表 数组 双端队列 maxlen 决定长度 自动挤出去之前下标为0的数据


# 键盘中断错误 KeyboardInterrupt ============================================================

# 剥离扩展名 from os.path import splitext

# from inspect import getcallargs 获得真实的参数

# 正则 ?P<name> 返回一个字典 使用名称捕获，捕获的是按括号顺序来的，嵌套太多太复杂可以使用?P
a = {None: 1, 1: 1, 2: 3} # 元数据
print (a[k] for k in a if k) # 这里比较厉害了 圆括号产生的居然是生成器
print [a[k] for k in a if k] # 而方括号是直接生成列表
print next((a[k] for k in a if k), None) # next居然还有默认值

# python文件指针的问题 ========================================================================
with open("test.txt", "r+") as f:
        new_content = f.read().replace("{", "") # 读取替换
        f.seek(0,0) # 移动指针到头顶
        f.truncate() # 清除指针往后的内容 重点是这个方法只会清除指针往后的内容
        f.seek(0,0) # 移动指针到头顶
        f.write(new_content) # 写入新的内容
# ===========================================================================================
# try 的 else
try:
    1 + 2
except:
    print "错了"
else:
    print "对了"
finally:
    print "管你是错了还是对了"




# HTML处理库 ========================================================================
from HTMLParser import HTMLParser
html_parser = HTMLParser()
# html_parser.unescape('&lt;abc&gt;') [out->] <abc> # 非转义

# 选择KEY的 lambda ==================================================================
from operator import itemgetter
itemgetter # 选择
methodcaller("decompose")(soup) 调用方法名字和参数传入实例
# 原来tornado的 yield  是为了注册回调函数,方便返回值,代码同步的作用
# 如果要全异步，真正的办法是不加yield 但是一定要启动一个tornado的io_loop
# python 命令行 参数方法


# 断点续传 http

# 汉字转拼音的库 xpinyin


# =======================================================================================

functools.total_ordering
复制代码 代码如下:

functools.total_ordering(cls)

这个装饰器是在python2.7的时候加上的，它是针对某个类如果定义了__lt__、le、gt、__ge__这些方法中的至少一个，使用该装饰器，则会自动的把其他几个比较函数也实现在该类中
复制代码 代码如下:

@total_ordering
class Student:
    def __eq__(self, other):
        return ((self.lastname.lower(), self.firstname.lower()) ==
                (other.lastname.lower(), other.firstname.lower()))
    def __lt__(self, other):
        return ((self.lastname.lower(), self.firstname.lower()) <
                (other.lastname.lower(), other.firstname.lower()))
print dir(Student)

得到
复制代码 代码如下:

['__doc__', '__eq__', '__ge__', '__gt__', '__le__', '__lt__', '__module__']